import * as ethers from "ethers";
import { BaseContract } from "ethers";
import { Transaction } from "ethers";
import dotenv from "dotenv";
import fs from "fs";

async function main() {
    dotenv.config();

    if (!process.env.PRIVATE_KEY) {
        throw new Error("PRIVATE_KEY environment variable is not defined");
    }
    if (!process.env.PRIVATE_KEY_PASSWORD) {
        throw new Error("PRIVATE_KEY environment variable is not defined");
    }
    if (!process.env.RPC_URL) {
        throw new Error("RPC_URL environment variable is not defined");
    }

    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);

    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    // const encryptedJson: string = fs.readFileSync(".encryptedKey.json", "utf8");

    // let wallet = ethers.Wallet.fromEncryptedJsonSync(
    //   encryptedJson,
    //   process.env.PRIVATE_KEY_PASSWORD
    // );

    // wallet = wallet.connect(provider);

    const abi = fs
        .readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
        .toString();

    const binary = fs
        .readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8")
        .toString();

    await deploySimpleStorage(wallet, abi, binary);
    // await makeRawTransaction();
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });

async function makeRawTransaction(wallet: ethers.Wallet): Promise<void> {
    const nonce = await wallet.getNonce();

    console.log(nonce);

    const tx: ethers.TransactionLike = {
        nonce: nonce,
        gasPrice: "20000000000",
        gasLimit: "6721975",
        to: null,
        value: 0,
        chainId: 1337,
        data: "0x60806040526040518060400160405280600a81526020016040518060400160405280600581526020017f436c6f776e000000000000000000000000000000000000000000000000000000815250815250600260008201518160000155602082015181600101908162000072919062000374565b5050506040518060400160405280600a81526020016040518060400160405280600581526020017f436c6f776e0000000000000000000000000000000000000000000000000000008152508152506004600082015181600001556020820151816001019081620000e3919062000374565b505050348015620000f357600080fd5b506200045b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200017c57607f821691505b60208210810362000192576200019162000134565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001fc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001bd565b620002088683620001bd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002556200024f620002498462000220565b6200022a565b62000220565b9050919050565b6000819050919050565b620002718362000234565b6200028962000280826200025c565b848454620001ca565b825550505050565b600090565b620002a062000291565b620002ad81848462000266565b505050565b5b81811015620002d557620002c960008262000296565b600181019050620002b3565b5050565b601f8211156200032457620002ee8162000198565b620002f984620001ad565b8101602085101562000309578190505b620003216200031885620001ad565b830182620002b2565b50505b505050565b600082821c905092915050565b6000620003496000198460080262000329565b1980831691505092915050565b600062000364838362000336565b9150826002028217905092915050565b6200037f82620000fa565b67ffffffffffffffff8111156200039b576200039a62000105565b5b620003a7825462000163565b620003b4828285620002d9565b600060209050601f831160018114620003ec5760008415620003d7578287015190505b620003e3858262000356565b86555062000453565b601f198416620003fc8662000198565b60005b828110156200042657848901518255600182019150602085019450602081019050620003ff565b8683101562000446578489015162000442601f89168262000336565b8355505b6001600288020188555050505b505050505050565b610a70806200046b6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306c62c2c1461005c5780632e64cec11461008c5780636f760f41146100aa5780639e7a13ad146100c6578063d80deced146100f7575b600080fd5b61007660048036038101906100719190610441565b610113565b60405161008391906104a3565b60405180910390f35b610094610141565b6040516100a191906104d7565b60405180910390f35b6100c460048036038101906100bf919061057e565b61014b565b005b6100e060048036038101906100db91906105de565b610221565b6040516100ee92919061068a565b60405180910390f35b610111600480360381019061010c91906106e6565b6102dd565b005b6000818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600154905090565b6000604051806040016040528083815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250905081600085856040516101bb929190610743565b90815260200160405180910390208190555060068190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190816102189190610968565b50505050505050565b6006818154811061023157600080fd5b906000526020600020906002020160009150905080600001549080600101805461025a9061078b565b80601f01602080910402602001604051908101604052809291908181526020018280546102869061078b565b80156102d35780601f106102a8576101008083540402835291602001916102d3565b820191906000526020600020905b8154815290600101906020018083116102b657829003601f168201915b5050505050905082565b8060018190555050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61034e82610305565b810181811067ffffffffffffffff8211171561036d5761036c610316565b5b80604052505050565b60006103806102e7565b905061038c8282610345565b919050565b600067ffffffffffffffff8211156103ac576103ab610316565b5b6103b582610305565b9050602081019050919050565b82818337600083830152505050565b60006103e46103df84610391565b610376565b905082815260208101848484011115610400576103ff610300565b5b61040b8482856103c2565b509392505050565b600082601f830112610428576104276102fb565b5b81356104388482602086016103d1565b91505092915050565b600060208284031215610457576104566102f1565b5b600082013567ffffffffffffffff811115610475576104746102f6565b5b61048184828501610413565b91505092915050565b6000819050919050565b61049d8161048a565b82525050565b60006020820190506104b86000830184610494565b92915050565b6000819050919050565b6104d1816104be565b82525050565b60006020820190506104ec60008301846104c8565b92915050565b600080fd5b600080fd5b60008083601f840112610512576105116102fb565b5b8235905067ffffffffffffffff81111561052f5761052e6104f2565b5b60208301915083600182028301111561054b5761054a6104f7565b5b9250929050565b61055b8161048a565b811461056657600080fd5b50565b60008135905061057881610552565b92915050565b600080600060408486031215610597576105966102f1565b5b600084013567ffffffffffffffff8111156105b5576105b46102f6565b5b6105c1868287016104fc565b935093505060206105d486828701610569565b9150509250925092565b6000602082840312156105f4576105f36102f1565b5b600061060284828501610569565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561064557808201518184015260208101905061062a565b60008484015250505050565b600061065c8261060b565b6106668185610616565b9350610676818560208601610627565b61067f81610305565b840191505092915050565b600060408201905061069f6000830185610494565b81810360208301526106b18184610651565b90509392505050565b6106c3816104be565b81146106ce57600080fd5b50565b6000813590506106e0816106ba565b92915050565b6000602082840312156106fc576106fb6102f1565b5b600061070a848285016106d1565b91505092915050565b600081905092915050565b600061072a8385610713565b93506107378385846103c2565b82840190509392505050565b600061075082848661071e565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107a357607f821691505b6020821081036107b6576107b561075c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261081e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826107e1565b61082886836107e1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061086561086061085b8461048a565b610840565b61048a565b9050919050565b6000819050919050565b61087f8361084a565b61089361088b8261086c565b8484546107ee565b825550505050565b600090565b6108a861089b565b6108b3818484610876565b505050565b5b818110156108d7576108cc6000826108a0565b6001810190506108b9565b5050565b601f82111561091c576108ed816107bc565b6108f6846107d1565b81016020851015610905578190505b610919610911856107d1565b8301826108b8565b50505b505050565b600082821c905092915050565b600061093f60001984600802610921565b1980831691505092915050565b6000610958838361092e565b9150826002028217905092915050565b6109718261060b565b67ffffffffffffffff81111561098a57610989610316565b5b610994825461078b565b61099f8282856108db565b600060209050601f8311600181146109d257600084156109c0578287015190505b6109ca858261094c565b865550610a32565b601f1984166109e0866107bc565b60005b82811015610a08578489015182556001820191506020850194506020810190506109e3565b86831015610a255784890151610a21601f89168261092e565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220e21649d5118bd0808f3f8998cc5163ccddfee7498c2737d9000b681d50274c5364736f6c63430008130033",
    };

    // Signs the transaction before sending it
    const sendTxResponse: ethers.TransactionResponse =
        await wallet.sendTransaction(tx);
    await sendTxResponse.wait(1);
    console.log(sendTxResponse);
}

async function deploySimpleStorage(
    wallet: ethers.Wallet,
    abi: string,
    binary: string,
): Promise<void> {
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

    console.log("Deploying, please wait...");

    const contract: BaseContract = await contractFactory.deploy({
        // gasPrice: 20000000000,
    });

    console.log(contract);
    const simpleStorageAddress = await contract.getAddress();
    console.log(`Contract address: ${simpleStorageAddress}`);

    await contract.deploymentTransaction()?.wait(1);

    const retrieveFunction = contract.getFunction("retrieve");

    const currentFavoriteNumber = await retrieveFunction();
    console.log(`Current fav number: ${currentFavoriteNumber}`);

    const storeFunction = await contract.getFunction("store");

    // Shoul pass Strings
    const trxResponse = await storeFunction("7");
    console.log(trxResponse);
    const trxReceipt = await trxResponse.wait(1);
    const updatedFavoriteNumber = await retrieveFunction();

    console.log(`Current fav number: ${updatedFavoriteNumber}`);
}

async function deploySimpleStorageToTestnet(
    wallet: ethers.Wallet,
    abi: string,
    binary: string,
): Promise<void> {}

// 0x4B006E4B3401541CbBF93256E8958900cf29aa2a
